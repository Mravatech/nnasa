apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def globalConfiguration = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    testBuildType "debug"

    defaultConfig {
        applicationId deps.applicationId
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        vectorDrawables.useSupportLibrary = true

        def versionMajor = 0
        def versionMinor = 0
        def versionPatch = 1
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        versionCode 1

        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding "UTF-8"
    }

    kotlin { experimental { coroutines 'enable' } }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'protobuf.meta'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    lintOptions { abortOnError false }

    signingConfigs {
        debug {
            storeFile file("../keystore/key.jks")
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
        stage {
            storeFile file("../keystore/key.jks") //TODO: add release keystore
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
        release {
            storeFile file("../keystore/key.jks") //TODO: add release keystore
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            multiDexEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        stage {
            applicationIdSuffix ".stage"
            minifyEnabled false
            debuggable true
            multiDexEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.stage
        }
        debug {
            applicationIdSuffix ".dev"
            minifyEnabled false
            debuggable true
            multiDexEnabled = false
            signingConfig signingConfigs.debug
        }
    }

    applicationVariants.all { variant ->
        switch (variant.getName()) {
            case 'release':
                variant.buildConfigField "String", "ENDPOINT", "\"${globalConfiguration['endpointRrod']}\""
                break
            case 'stage':
                variant.buildConfigField "String", "ENDPOINT", "\"${globalConfiguration['endpointPreProd']}\""
                break
            case 'debug':
                variant.buildConfigField "String", "ENDPOINT", "\"${globalConfiguration['endpointDev']}\""
                break
        }
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/controller',
                    'src/main/res/widget',
                    'src/main/res/item',
                    'src/main/res/activity',
            ]
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //modules
    implementation deps.core
    implementation deps.data
    implementation deps.domain

    //support
    implementation deps.support.appcompat
    implementation deps.support.design
    implementation deps.support.cardview
    implementation deps.support.annotations
    implementation deps.support.recyclerview
    implementation deps.support.constraintLayout

    //firebase
    implementation deps.firebase.core
    implementation deps.firebase.auth
    implementation deps.firebase.auth_service
    implementation deps.firebase.database
    implementation deps.firebase.storage
    implementation deps.firebase.ui

    //coroutines
    implementation deps.coroutines.core
    implementation deps.coroutines.android

    //glide
    implementation deps.glide.glide
    kapt deps.glide.glideCompiler
    implementation deps.glide.glideTransformers

    //ucrop
    implementation deps.ucrop.general

    //mapper
    implementation deps.mapper.core

    //arch
    implementation deps.archComponents.viewModel

    //conductor
    implementation deps.conductor.core
    implementation deps.conductor.lifecycle

    //dependency injection
    implementation deps.di.core
    implementation deps.di.android

    //other
    implementation deps.other.logger
    implementation deps.other.leak
    implementation deps.stetho.runtime

    //network
    implementation deps.network.retrofit
    implementation deps.network.coroutineAdapter
    implementation deps.network.gsonconverter
    implementation deps.network.logging

    //kotlin
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.androidExtensions
}

apply plugin: 'com.google.gms.google-services'
